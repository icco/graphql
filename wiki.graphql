"""
A Log is a journal entry by an individual.
"""
type Log implements Linkable {
  id: ID!
  description: String!
  project: String!
  user: User!
  duration: Duration
  uri: URI!
  sector: WorkSector!
  started: Time!
  stopped: Time!
  created: Time!
  modified: Time!
}

"""
Geo is a simple type for wrapping a point.
"""
type Geo {
  lat: Float!
  long: Float!
}

"""
Page is a wiki page.
"""
type Page implements Linkable {
  slug: ID!
  content: String!
  user: User!
  created: Time!
  modified: Time!
  uri: URI!
  meta: MetaGrouping
}

type Meta {
  key: String!
  record: String!
}

type MetaGrouping {
  records: [Meta]!
}

type Photo implements Linkable {
  id: ID!
  year: Int!
  content_type: String!
  created: Time!
  modified: Time!
  uri: URI!
}

enum WorkSector {
  CODE
  WRITING
  AUDIO
  RESEARCH
}

input NewLog {
  sector: WorkSector!
  description: String
  project: String!
  started: Time!
  stopped: Time!
}

input EditPage {
  slug: ID!
  content: String!
  meta: [InputMeta]!
}

input InputMeta {
  key: String!
  record: String!
}

input InputGeo {
  lat: Float!
  long: Float!
}

extend type Query {
  page(slug: ID!): Page @loggedIn
  pages(input: Limit): [Page]! @loggedIn

  "Returns all Logs for your user."
  logs(input: Limit): [Log]! @loggedIn

  "Returns a log based on an ID."
  log(id: ID!): Log @loggedIn

  "Returns all photos for your user."
  photos(input: Limit): [Photo]! @loggedIn
}

extend type Mutation {
  insertLog(input: NewLog!): Log @loggedIn
  upsertPage(input: EditPage!): Page! @loggedIn
}
